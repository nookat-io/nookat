name: '[CD] Release'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          # - platform: 'ubuntu-22.04'
          #   args: ''
          # - platform: 'windows-latest'
          #   args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf jq

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      - name: Prepare for Release
        run: |
          echo "Preparing release..."
          echo "Tagging version..."

      - name: Import Apple Developer Certificate (macOS only)
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: verify certificate (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: Read version and set env (Linux/macOS)
        if: matrix.platform != 'windows-latest'
        shell: bash
        run: |
          VERSION_TAG=v$(jq -r '.version' < src-tauri/tauri.conf.json)
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Read version and set env (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $version = (Get-Content src-tauri/tauri.conf.json | ConvertFrom-Json).version
          $VERSION_TAG = "v$version"
          echo "VERSION_TAG=$VERSION_TAG" >> $env:GITHUB_ENV

      - name: Set public key for updater (Linux/macOS)
        if: matrix.platform != 'windows-latest'
        env:
          TAURI_SIGNING_PUBLIC_KEY: ${{ secrets.TAURI_SIGNING_PUBLIC_KEY }}
        run: |
          echo "TAURI_SIGNING_PUBLIC_KEY=$TAURI_SIGNING_PUBLIC_KEY" >> $env:GITHUB_ENV
          echo $TAURI_SIGNING_PUBLIC_KEY
          # Replace the pubkey in tauri.conf.json with the value from the TAURI_SIGNING_PUBLIC_KEY env variable
          cd src-tauri && sed -i.bak "s/YOUR_PUBLIC_KEY_HERE/$TAURI_SIGNING_PUBLIC_KEY/g" tauri.conf.json && rm tauri.conf.json.bak

      - name: Set public key for updater (Windows)
        if: matrix.platform == 'windows-latest'
        env:
          TAURI_SIGNING_PUBLIC_KEY: ${{ secrets.TAURI_SIGNING_PUBLIC_KEY }}
        run: |
          echo "TAURI_SIGNING_PUBLIC_KEY=$TAURI_SIGNING_PUBLIC_KEY" >> $env:GITHUB_ENV
          echo $TAURI_SIGNING_PUBLIC_KEY
          # Replace the pubkey in tauri.conf.json with the value from the TAURI_SIGNING_PUBLIC_KEY env variable
          cd src-tauri
          $content = Get-Content tauri.conf.json -Raw
          $content = $content -replace "YOUR_PUBLIC_KEY_HERE", $env:TAURI_SIGNING_PUBLIC_KEY
          Set-Content tauri.conf.json -Value $content -NoNewline

      - name: Build and Publish
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          VITE_APTABASE_APP_KEY: ${{ secrets.VITE_APTABASE_APP_KEY }}
          # VITE_SENTRY_DSN for frontend (vite)
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          # SENTRY_DSN for backend (tauri)
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          # Tauri signing keys for Updater plugin
          TAURI_SIGNING_PUBLIC_KEY: ${{ secrets.TAURI_SIGNING_PUBLIC_KEY }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{ env.VERSION_TAG }}
          releaseName: 'nookat ${{ env.VERSION_TAG }}'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          includeDebug: true
          updaterJsonPreferNsis: true
          updaterJsonKeepUniversal: true
          args: ${{ matrix.args }}

      - name: Set Version Tag (Linux/macOS)
        if: matrix.platform != 'windows-latest'
        shell: bash
        run: |
          if git rev-parse "${{ env.VERSION_TAG }}" >/dev/null 2>&1; then echo "Tag ${{ env.VERSION_TAG }} already exists. Skipping tagging."
          else echo "Tagging with version: ${{ env.VERSION_TAG }}"
            git tag ${{ env.VERSION_TAG }}
            git push origin ${{ env.VERSION_TAG }}
          fi

      - name: Set Version Tag (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $tagExists = git rev-parse "${{ env.VERSION_TAG }}" 2>$null
          if ($LASTEXITCODE -eq 0) {
            echo "Tag ${{ env.VERSION_TAG }} already exists. Skipping tagging."
          } else {
            echo "Tagging with version: ${{ env.VERSION_TAG }}"
            git tag ${{ env.VERSION_TAG }}
            git push origin ${{ env.VERSION_TAG }}
          }
